import { BLOCK } from '../constants/actions';
import { Block } from '../actions/core';

const inital_state = new Block('');

const BlockReducer = (state = inital_state, action) => {
  switch (action.type) {
    /*
     * +—————————————————————————————————————————————————————————————————————————————————————+
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * | | Create block.
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * +—————————————————————————————————————————————————————————————————————————————————————+
     */
    case BLOCK.CREATE:
      return new Block(action.payload);

    /*
     * +—————————————————————————————————————————————————————————————————————————————————————+
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * | | Update block data.
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * +—————————————————————————————————————————————————————————————————————————————————————+
     */
    case BLOCK.UPDATE:

      if (action.payload) {
        // If there's a block. re-calculate the hash function.
        let block = action.payload.block;

        // Update data & lastly re-calculate hash.
        block.data = action.payload.data;
        block.hash = block.calculateHash();

        return block;
      }

      return state;

    /*
     * +—————————————————————————————————————————————————————————————————————————————————————+
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * | | Mine block.
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * +—————————————————————————————————————————————————————————————————————————————————————+
     */
    case BLOCK.MINE:
      return state;

    /*
     * +—————————————————————————————————————————————————————————————————————————————————————+
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * | | Verify block integrity.
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * +—————————————————————————————————————————————————————————————————————————————————————+
     */
    case BLOCK.VERIFY:
      return state;

    /*
     * +—————————————————————————————————————————————————————————————————————————————————————+
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * | | Calculate cryptographic hash.
     * | +—————————————————————————————————————————————————————————————————————————————————+ |
     * +—————————————————————————————————————————————————————————————————————————————————————+
     */
    case BLOCK.CALCULATE_HASH:
      return state;

    default:
      return state;
  }
};

export default BlockReducer;
